datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  email         String          @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  onboarded     Boolean         @default(false)
  name          String?
  gradient      String?
  stripeId      String?
  ownedTeams    Team[]         @relation("OwnerTeams")
  memberTeams   Team[]         @relation("MemberTeams")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  owners    User[]   @relation("OwnerTeams")
  members   User[]   @relation("MemberTeams")
  activated Boolean  @default(false)
  whitelist String[]
  stripeCustomerId String?
  shareId   String   @unique
  publicId  String   @unique
  jobs      Job[]
}

model Job {
  id           String   @id @default(cuid())
  title        String
  location     String
  salary       String
  description  String
  requirements String
  questions    Json
  status       String  @default("Active")
  applicant    Int     @default(0)
  teamId       String
  team         Team     @relation(fields: [teamId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  applications Application[]
}

model Application {
  id           String   @id @default(cuid())
  jobId        String
  job          Job      @relation(fields: [jobId], references: [id])
  status       String   @default("Applied")
  score        String?
  createdAt    DateTime @default(now())
  answers      Json
}